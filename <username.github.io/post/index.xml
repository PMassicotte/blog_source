<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Another R blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on Another R blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>pmassicotte@hotmail.com (Philippe Massicotte)</managingEditor>
    <webMaster>pmassicotte@hotmail.com (Philippe Massicotte)</webMaster>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Calculating daylight in R</title>
      <link>/post/2015-11-06-daylight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2015-11-06-daylight/</guid>
      <description>A little bit more than a year ago I moved in Denmark. So far, the last year has been quite fun and I have been working on interesting projects. The most difficult part has been the winter since the daylight is very short between November and February. I was curious to see what was the difference in daylight between my home country (Canada) and Denmark. This is a short post showing how to calculate daylight based on the latitude position and the day of the year (DOY).</description>
    </item>
    
    <item>
      <title>Installing latest version of RStudio from R</title>
      <link>/post/2016-11-18-updating-rstudio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2016-11-18-updating-rstudio/</guid>
      <description>If you are like me, chances are that you update RStudio on a daily basis. Here is a small R script that automatically download and install the latest version of RStudio on your computer. Note this is for ubuntu64 based systems, but this can be easily modified for Windows or Mac platforms.
rstudio_ubuntu_daily_url &amp;lt;- &amp;quot;https://www.rstudio.org/download/daily/desktop/ubuntu64/&amp;quot; r &amp;lt;- readLines(curl::curl(rstudio_ubuntu_daily_url)) file &amp;lt;- regmatches(r, regexpr(&amp;quot;https\\S+?deb&amp;quot;, r))[1] file destfile &amp;lt;- paste(&amp;quot;/tmp/&amp;quot;, basename(file)) download.file(file, destfile = destfile) cmd &amp;lt;- sprintf(&amp;quot;dpkg -i %s&amp;quot;, destfile) system(cmd) </description>
    </item>
    
    <item>
      <title>Introducing eemR</title>
      <link>/post/2015-11-05-eemr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2015-11-05-eemr/</guid>
      <description>The eemR package implements various functions used calculate metrics from excitation-emission matrix (EEM) as well as to preform pre-processing corrections before PARAFAC analysis. All functions from this package start with the eem_ prefix. Please note this is a very alpha version of the package for testing purpose only.
library(eemR) ls(&amp;quot;package:eemR&amp;quot;) ## [1] &amp;quot;absorbance&amp;quot; &amp;quot;eem_bind&amp;quot; ## [3] &amp;quot;eem_biological_index&amp;quot; &amp;quot;eem_coble_peaks&amp;quot; ## [5] &amp;quot;eem_cut&amp;quot; &amp;quot;eem_export_matlab&amp;quot; ## [7] &amp;quot;eem_extract&amp;quot; &amp;quot;eem_fluorescence_index&amp;quot; ## [9] &amp;quot;eem_humification_index&amp;quot; &amp;quot;eem_inner_filter_effect&amp;quot; ## [11] &amp;quot;eem_names&amp;quot; &amp;quot;eem_names&amp;lt;-&amp;quot; ## [13] &amp;quot;eem_raman_normalisation&amp;quot; &amp;quot;eem_read&amp;quot; ## [15] &amp;quot;eem_remove_blank&amp;quot; &amp;quot;eem_remove_scattering&amp;quot; ## [17] &amp;quot;eem_set_wavelengths&amp;quot; The package can be installed using the following command.</description>
    </item>
    
    <item>
      <title>Quick tip</title>
      <link>/post/2016-03-07-not_in/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2016-03-07-not_in/</guid>
      <description>It is easy to verify if elements are within a list using the %in% operator in R. For example:
c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;) %in% letters[1:5] ## [1] TRUE TRUE However, I am often in a situation where I need to do the opposite. This can be easily achieved using the Negate() function.
`%ni%` &amp;lt;- Negate(`%in%`) c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;) %ni% letters[1:5] ## [1] FALSE FALSE Voilà!</description>
    </item>
    
    <item>
      <title>R 101</title>
      <link>/post/2015-11-13-r-101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2015-11-13-r-101/</guid>
      <description>Sometimes when you open a data file (lets say a .csv), variables will be recognized as factor whereas it should be numeric. It is therefore tempting to simply convert the variable to numeric using as.numeric(). Big mistake! If you use directly as.numeric() on a variable of the type factor, R will returns the levels of the factor rather the actual values. To overcome this hassle, you should first convert the variable into a string with as.</description>
    </item>
    
    <item>
      <title>Visualizating olympics medals in R</title>
      <link>/post/2016-08-25-olympics2016/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2016-08-25-olympics2016/</guid>
      <description>Recently I have been more interested to perform web scraping to extract public data to perform data analysis. There are probably many R packages out there that do a good job at such task, but I found out that the rvest was among the most popular ones. Hence I decided to give it a try.
In this post, I’m using the rvest library to visualize how many medals were obtained by each country during the summer Olympics 2016.</description>
    </item>
    
    <item>
      <title>eemR 0.1.3 is now on CRAN</title>
      <link>/post/2016-05-02-eemr-0.1.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2016-05-02-eemr-0.1.3/</guid>
      <description>eemR has been updated to v0.1.3 and brings a lot of new features. Among the most interesting ones:
 Shiny support: You can interactively visualize EEMS by using interactive = TRUE. Ex.: plot(X, interactive = TRUE).
 A vignette has been added.
  eem_remove_blank() and eem_raman_normalisation() can now try to implicitly use a blank eem from a eemlist object (#20). If blank is omitted (blank = NA), the functions will try to extract the blank from the eemlist object.</description>
    </item>
    
  </channel>
</rss>